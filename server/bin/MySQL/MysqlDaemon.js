"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const service_starter_1 = require("service-starter");
class MysqlDaemon extends service_starter_1.ServiceModule {
    onStart() {
        return new Promise((resolve, reject) => {
            this._mysqld = child_process.spawn('/usr/local/bin/docker-entrypoint.sh', ["mysqld"]);
            this._mysqld.on('error', this.emit.bind(this, 'error'));
            let timer;
            let started = false;
            function judge() {
                if (started === false) {
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        started = true;
                        resolve();
                    }, 20000);
                }
            }
            judge();
            this._mysqld.stdout.on('data', (data) => {
                service_starter_1.log.l(`mysqld-out: ${data.toString().trim()}`);
                judge();
            });
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            if (this._mysqld) {
                this._mysqld.once('exit', resolve);
                this._mysqld.kill();
                setTimeout(() => {
                    this._mysqld = undefined;
                    reject(new Error('关闭超时'));
                }, 20000);
            }
            else {
                resolve();
            }
        });
    }
}
exports.default = MysqlDaemon;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk15U1FML015c3FsRGFlbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0NBQWdEO0FBQ2hELHFEQUFxRDtBQVNyRCxpQkFBaUMsU0FBUSwrQkFBYTtJQUtsRCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFFL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN0RixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFHeEQsSUFBSSxLQUFtQixDQUFDO1lBRXhCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztZQUdwQjtnQkFDSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDcEIsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNwQixLQUFLLEdBQUcsVUFBVSxDQUFDO3dCQUNmLE9BQU8sR0FBRyxJQUFJLENBQUM7d0JBQ2YsT0FBTyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNkLENBQUM7WUFDTCxDQUFDO1lBQ0QsS0FBSyxFQUFFLENBQUM7WUFHUixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSTtnQkFDaEMscUJBQUcsQ0FBQyxDQUFDLENBQUMsZUFBZSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQyxLQUFLLEVBQUUsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDO1FBSVAsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFHcEIsVUFBVSxDQUFDO29CQUNQLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO29CQUN6QixNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDOUIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2QsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBdkRELDhCQXVEQyIsImZpbGUiOiJNeVNRTC9NeXNxbERhZW1vbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGlsZF9wcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xuaW1wb3J0IHsgbG9nLCBTZXJ2aWNlTW9kdWxlIH0gZnJvbSBcInNlcnZpY2Utc3RhcnRlclwiO1xuXG4vKipcbiAqIOeuoeeQhk15U1FMIERhZW1vbueahOWQr+WKqOS4juWFs+mXrVxuICogXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgTXlTUUxEYWVtb25cbiAqIEBleHRlbmRzIHtTZXJ2aWNlTW9kdWxlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeXNxbERhZW1vbiBleHRlbmRzIFNlcnZpY2VNb2R1bGUge1xuXG4gICAgLy9NeVNRTCBEYWVtb27ov5vnqItcbiAgICBwcml2YXRlIF9teXNxbGQ6IGNoaWxkX3Byb2Nlc3MuQ2hpbGRQcm9jZXNzIHwgdW5kZWZpbmVkO1xuXG4gICAgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgdGhpcy5fbXlzcWxkID0gY2hpbGRfcHJvY2Vzcy5zcGF3bignL3Vzci9sb2NhbC9iaW4vZG9ja2VyLWVudHJ5cG9pbnQuc2gnLCBbXCJteXNxbGRcIl0pO1xuICAgICAgICAgICAgdGhpcy5fbXlzcWxkLm9uKCdlcnJvcicsIHRoaXMuZW1pdC5iaW5kKHRoaXMsICdlcnJvcicpKTtcblxuICAgICAgICAgICAgLy8g5b2TbXlzcWxk55qE5qCH5YeG6L6T5Ye65rWB5LiN5YaN6L6T5Ye65pe277yM5Yik5a6a5Li65ZCv5Yqo5oiQ5Yqf5LqGXG4gICAgICAgICAgICBsZXQgdGltZXI6IE5vZGVKUy5UaW1lcjtcbiAgICAgICAgICAgIC8v5piv5ZCm5bey57uP5ZCv5Yqo5LqGXG4gICAgICAgICAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvL+WIpOWumuWmguaenDIw56eS5Lit5LmL5YaF6YO95rKh5pyJ5paw55qE5YaF5a656L6T5Ye65YiZ5Yik5a6a5Li65ZCv5Yqo5oiQ5Yqf5LqGXG4gICAgICAgICAgICBmdW5jdGlvbiBqdWRnZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAganVkZ2UoKTtcblxuICAgICAgICAgICAgLy8g5omT5Y2w5qCH5YeG6L6T5Ye65rWBXG4gICAgICAgICAgICB0aGlzLl9teXNxbGQuc3Rkb3V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBsb2cubChgbXlzcWxkLW91dDogJHtkYXRhLnRvU3RyaW5nKCkudHJpbSgpfWApO1xuICAgICAgICAgICAgICAgIGp1ZGdlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8qIHRoaXMuX215c3FsZC5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZy5sKGBteXNxbGQtZXJyOiAke2RhdGEudG9TdHJpbmcoKS50cmltKCl9YCk7XG4gICAgICAgICAgICB9KTsgKi9cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25TdG9wKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX215c3FsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX215c3FsZC5vbmNlKCdleGl0JywgcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbXlzcWxkLmtpbGwoKTtcblxuICAgICAgICAgICAgICAgIC8v6K6+572u5YGc5q2i6LaF5pe2XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX215c3FsZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcign5YWz6Zet6LaF5pe2JykpO1xuICAgICAgICAgICAgICAgIH0sIDIwMDAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59Il19
