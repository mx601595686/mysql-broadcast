"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_starter_1 = require("service-starter");
class SystemLogger extends service_starter_1.ServiceModule {
    get _mysqlCon() {
        return this.services.MysqlConnection;
    }
    async onStart() {
        await this._mysqlCon.query("CREATE DATABASE IF NOT EXISTS `__mb__` /*!40100 DEFAULT CHARACTER SET utf8 */");
        const has = await this._mysqlCon.query(" \
            SELECT  \
                `TABLE_NAME` \
            FROM \
                `INFORMATION_SCHEMA`.`TABLES` \
            WHERE \
                `TABLE_SCHEMA` = '__mb__' \
                    AND `TABLE_NAME` = 'log_type' \
        ");
        if (has.length == 0) {
            await this._mysqlCon.query(" \
                CREATE TABLE IF NOT EXISTS `__mb__`.`log_type` ( \
                    `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT, \
                    `name` VARCHAR(255) NOT NULL COMMENT '类型名称', \
                    PRIMARY KEY (`id`), \
                    UNIQUE KEY `id_UNIQUE` (`id`), \
                    UNIQUE KEY `name_UNIQUE` (`name`) \
                )  ENGINE=INNODB DEFAULT CHARSET=UTF8 COMMENT='日志类型'; \
            ");
            await this._mysqlCon.query(" \
                INSERT INTO `__mb__`.`log_type` (`id`, `name`) VALUES ('1', 'system_log'); \
                INSERT INTO `__mb__`.`log_type` (`id`, `name`) VALUES ('2', 'system_warning'); \
                INSERT INTO `__mb__`.`log_type` (`id`, `name`) VALUES ('3', 'system_error'); \
            ");
        }
        await this._mysqlCon.query(" \
            CREATE TABLE IF NOT EXISTS `__mb__`.`log` ( \
                `id` int(10) unsigned NOT NULL AUTO_INCREMENT, \
                `type` int(10) unsigned NOT NULL COMMENT '错误类型', \
                `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '发生时间', \
                `msg` text NOT NULL COMMENT '错误消息', \
                PRIMARY KEY (`id`), \
                UNIQUE KEY `id_UNIQUE` (`id`), \
                KEY `type_idx` (`type`), \
                CONSTRAINT `log_type` FOREIGN KEY (`type`) REFERENCES `log_type` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION \
            ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='系统日志记录'; \
        ");
        await this._mysqlCon.query(" \
            DROP PROCEDURE IF EXISTS `__mb__`.`log`; \
            CREATE DEFINER = CURRENT_USER PROCEDURE `__mb__`.`log`(msg TEXT) \
            BEGIN \
                INSERT INTO `__mb__`.`log` (`type`, `msg`) VALUES ('1' , msg); \
            END \
        ");
        await this._mysqlCon.query(" \
            DROP PROCEDURE IF EXISTS `__mb__`.`log_warning`; \
            CREATE DEFINER = CURRENT_USER PROCEDURE `__mb__`.`log_warning`(msg TEXT) \
            BEGIN \
                INSERT INTO `__mb__`.`log` (`type`, `msg`) VALUES ('2' , msg); \
            END \
        ");
        await this._mysqlCon.query(" \
            DROP PROCEDURE IF EXISTS `__mb__`.`log_error`; \
            CREATE DEFINER = CURRENT_USER PROCEDURE `__mb__`.`log_error`(msg TEXT) \
            BEGIN \
                INSERT INTO `__mb__`.`log` (`type`, `msg`) VALUES ('3' , msg); \
            END \
        ");
    }
    async log(msg) {
        await this._mysqlCon.query("CALL `__mb__`.`log`(?)", [msg]);
    }
    async error(msg) {
        await this._mysqlCon.query("CALL `__mb__`.`log_error`(?)", [msg]);
    }
    async warning(msg) {
        await this._mysqlCon.query("CALL `__mb__`.`log_warning`(?)", [msg]);
    }
}
exports.default = SystemLogger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN5c3RlbUxvZ2dlci9TeXN0ZW1Mb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxREFBcUQ7QUFXckQsa0JBQWtDLFNBQVEsK0JBQWE7SUFFbkQsSUFBWSxTQUFTO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWtDLENBQUM7SUFDNUQsQ0FBQztJQVVELEtBQUssQ0FBQyxPQUFPO1FBRVQsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQywrRUFBK0UsQ0FBQyxDQUFDO1FBRzVHLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7Ozs7Ozs7O1NBUXRDLENBQUMsQ0FBQztRQUdILEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDOzs7Ozs7OzthQVExQixDQUFDLENBQUM7WUFHSCxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDOzs7O2FBSTFCLENBQUMsQ0FBQztRQUNQLENBQUM7UUFHRCxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDOzs7Ozs7Ozs7OztTQVcxQixDQUFDLENBQUM7UUFHSCxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDOzs7Ozs7U0FNMUIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQzs7Ozs7O1NBTTFCLENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7Ozs7OztTQU0xQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBS0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFXO1FBQ2pCLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFLRCxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQVc7UUFDbkIsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUtELEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBVztRQUNyQixNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0NBQ0o7QUE3R0QsK0JBNkdDIiwiZmlsZSI6IlN5c3RlbUxvZ2dlci9TeXN0ZW1Mb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2csIFNlcnZpY2VNb2R1bGUgfSBmcm9tIFwic2VydmljZS1zdGFydGVyXCI7XG5cbmltcG9ydCBNeXNxbENvbm5lY3Rpb24gZnJvbSAnLi4vTXlTUUwvTXlzcWxDb25uZWN0aW9uJztcblxuLyoqXG4gKiDlnKjmlbDmja7lupPkuK3orrDlvZXns7vnu5/ml6Xlv5fjgILmo4Dmn6XmlbDmja7lupPkuK3mmK/lkKbmnInns7vnu5/plJnor6/orrDlvZXooahcbiAqIFxuICogQGV4cG9ydFxuICogQGNsYXNzIFN5c3RlbUxvZ2dlclxuICogQGV4dGVuZHMge1NlcnZpY2VNb2R1bGV9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN5c3RlbUxvZ2dlciBleHRlbmRzIFNlcnZpY2VNb2R1bGUge1xuXG4gICAgcHJpdmF0ZSBnZXQgX215c3FsQ29uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlcy5NeXNxbENvbm5lY3Rpb24gYXMgTXlzcWxDb25uZWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOajgOafpeezu+e7n+aXpeW/l+iusOW9leaVsOaNruW6k19fbWJfX1xuICAgICAqIOajgOafpeezu+e7n+aXpeW/l+iusOW9leexu+Wei+ihqOaYr+WQpuW3sue7j+WIm+W7ulxuICAgICAqIOajgOafpeezu+e7n+aXpeW/l+iusOW9leihqFxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBcbiAgICAgKiBAbWVtYmVyb2YgU3lzdGVtTG9nZ2VyXG4gICAgICovXG4gICAgYXN5bmMgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8g5Yib5bu6X19tYl9fXG4gICAgICAgIGF3YWl0IHRoaXMuX215c3FsQ29uLnF1ZXJ5KFwiQ1JFQVRFIERBVEFCQVNFIElGIE5PVCBFWElTVFMgYF9fbWJfX2AgLyohNDAxMDAgREVGQVVMVCBDSEFSQUNURVIgU0VUIHV0ZjggKi9cIik7XG5cbiAgICAgICAgLy8g5qOA5p+lIGxvZ190eXBlIOihqOaYr+WQpuW3sue7j+WIm+W7ulxuICAgICAgICBjb25zdCBoYXMgPSBhd2FpdCB0aGlzLl9teXNxbENvbi5xdWVyeShcIiBcXFxuICAgICAgICAgICAgU0VMRUNUICBcXFxuICAgICAgICAgICAgICAgIGBUQUJMRV9OQU1FYCBcXFxuICAgICAgICAgICAgRlJPTSBcXFxuICAgICAgICAgICAgICAgIGBJTkZPUk1BVElPTl9TQ0hFTUFgLmBUQUJMRVNgIFxcXG4gICAgICAgICAgICBXSEVSRSBcXFxuICAgICAgICAgICAgICAgIGBUQUJMRV9TQ0hFTUFgID0gJ19fbWJfXycgXFxcbiAgICAgICAgICAgICAgICAgICAgQU5EIGBUQUJMRV9OQU1FYCA9ICdsb2dfdHlwZScgXFxcbiAgICAgICAgXCIpO1xuXG4gICAgICAgIC8vIOWIm+W7uiBsb2dfdHlwZSDooahcbiAgICAgICAgaWYgKGhhcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fbXlzcWxDb24ucXVlcnkoXCIgXFxcbiAgICAgICAgICAgICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBgX19tYl9fYC5gbG9nX3R5cGVgICggXFxcbiAgICAgICAgICAgICAgICAgICAgYGlkYCBJTlQoMTApIFVOU0lHTkVEIE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULCBcXFxuICAgICAgICAgICAgICAgICAgICBgbmFtZWAgVkFSQ0hBUigyNTUpIE5PVCBOVUxMIENPTU1FTlQgJ+exu+Wei+WQjeensCcsIFxcXG4gICAgICAgICAgICAgICAgICAgIFBSSU1BUlkgS0VZIChgaWRgKSwgXFxcbiAgICAgICAgICAgICAgICAgICAgVU5JUVVFIEtFWSBgaWRfVU5JUVVFYCAoYGlkYCksIFxcXG4gICAgICAgICAgICAgICAgICAgIFVOSVFVRSBLRVkgYG5hbWVfVU5JUVVFYCAoYG5hbWVgKSBcXFxuICAgICAgICAgICAgICAgICkgIEVOR0lORT1JTk5PREIgREVGQVVMVCBDSEFSU0VUPVVURjggQ09NTUVOVD0n5pel5b+X57G75Z6LJzsgXFxcbiAgICAgICAgICAgIFwiKTtcblxuICAgICAgICAgICAgLy/mj5LlhaXmlbDmja5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX215c3FsQ29uLnF1ZXJ5KFwiIFxcXG4gICAgICAgICAgICAgICAgSU5TRVJUIElOVE8gYF9fbWJfX2AuYGxvZ190eXBlYCAoYGlkYCwgYG5hbWVgKSBWQUxVRVMgKCcxJywgJ3N5c3RlbV9sb2cnKTsgXFxcbiAgICAgICAgICAgICAgICBJTlNFUlQgSU5UTyBgX19tYl9fYC5gbG9nX3R5cGVgIChgaWRgLCBgbmFtZWApIFZBTFVFUyAoJzInLCAnc3lzdGVtX3dhcm5pbmcnKTsgXFxcbiAgICAgICAgICAgICAgICBJTlNFUlQgSU5UTyBgX19tYl9fYC5gbG9nX3R5cGVgIChgaWRgLCBgbmFtZWApIFZBTFVFUyAoJzMnLCAnc3lzdGVtX2Vycm9yJyk7IFxcXG4gICAgICAgICAgICBcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvL+WIm+W7uiBsb2cg6KGoXG4gICAgICAgIGF3YWl0IHRoaXMuX215c3FsQ29uLnF1ZXJ5KFwiIFxcXG4gICAgICAgICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBgX19tYl9fYC5gbG9nYCAoIFxcXG4gICAgICAgICAgICAgICAgYGlkYCBpbnQoMTApIHVuc2lnbmVkIE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULCBcXFxuICAgICAgICAgICAgICAgIGB0eXBlYCBpbnQoMTApIHVuc2lnbmVkIE5PVCBOVUxMIENPTU1FTlQgJ+mUmeivr+exu+WeiycsIFxcXG4gICAgICAgICAgICAgICAgYHRpbWVgIHRpbWVzdGFtcCBOT1QgTlVMTCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QIE9OIFVQREFURSBDVVJSRU5UX1RJTUVTVEFNUCBDT01NRU5UICflj5HnlJ/ml7bpl7QnLCBcXFxuICAgICAgICAgICAgICAgIGBtc2dgIHRleHQgTk9UIE5VTEwgQ09NTUVOVCAn6ZSZ6K+v5raI5oGvJywgXFxcbiAgICAgICAgICAgICAgICBQUklNQVJZIEtFWSAoYGlkYCksIFxcXG4gICAgICAgICAgICAgICAgVU5JUVVFIEtFWSBgaWRfVU5JUVVFYCAoYGlkYCksIFxcXG4gICAgICAgICAgICAgICAgS0VZIGB0eXBlX2lkeGAgKGB0eXBlYCksIFxcXG4gICAgICAgICAgICAgICAgQ09OU1RSQUlOVCBgbG9nX3R5cGVgIEZPUkVJR04gS0VZIChgdHlwZWApIFJFRkVSRU5DRVMgYGxvZ190eXBlYCAoYGlkYCkgT04gREVMRVRFIE5PIEFDVElPTiBPTiBVUERBVEUgTk8gQUNUSU9OIFxcXG4gICAgICAgICAgICApIEVOR0lORT1Jbm5vREIgQVVUT19JTkNSRU1FTlQ9MiBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT01NRU5UPSfns7vnu5/ml6Xlv5forrDlvZUnOyBcXFxuICAgICAgICBcIik7XG5cbiAgICAgICAgLy8g5Yib5bu65a2Y5YKo6L+H56iL77yM5pa55L6/6K6w5b2V5pel5b+XXG4gICAgICAgIGF3YWl0IHRoaXMuX215c3FsQ29uLnF1ZXJ5KFwiIFxcXG4gICAgICAgICAgICBEUk9QIFBST0NFRFVSRSBJRiBFWElTVFMgYF9fbWJfX2AuYGxvZ2A7IFxcXG4gICAgICAgICAgICBDUkVBVEUgREVGSU5FUiA9IENVUlJFTlRfVVNFUiBQUk9DRURVUkUgYF9fbWJfX2AuYGxvZ2AobXNnIFRFWFQpIFxcXG4gICAgICAgICAgICBCRUdJTiBcXFxuICAgICAgICAgICAgICAgIElOU0VSVCBJTlRPIGBfX21iX19gLmBsb2dgIChgdHlwZWAsIGBtc2dgKSBWQUxVRVMgKCcxJyAsIG1zZyk7IFxcXG4gICAgICAgICAgICBFTkQgXFxcbiAgICAgICAgXCIpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuX215c3FsQ29uLnF1ZXJ5KFwiIFxcXG4gICAgICAgICAgICBEUk9QIFBST0NFRFVSRSBJRiBFWElTVFMgYF9fbWJfX2AuYGxvZ193YXJuaW5nYDsgXFxcbiAgICAgICAgICAgIENSRUFURSBERUZJTkVSID0gQ1VSUkVOVF9VU0VSIFBST0NFRFVSRSBgX19tYl9fYC5gbG9nX3dhcm5pbmdgKG1zZyBURVhUKSBcXFxuICAgICAgICAgICAgQkVHSU4gXFxcbiAgICAgICAgICAgICAgICBJTlNFUlQgSU5UTyBgX19tYl9fYC5gbG9nYCAoYHR5cGVgLCBgbXNnYCkgVkFMVUVTICgnMicgLCBtc2cpOyBcXFxuICAgICAgICAgICAgRU5EIFxcXG4gICAgICAgIFwiKTtcblxuICAgICAgICBhd2FpdCB0aGlzLl9teXNxbENvbi5xdWVyeShcIiBcXFxuICAgICAgICAgICAgRFJPUCBQUk9DRURVUkUgSUYgRVhJU1RTIGBfX21iX19gLmBsb2dfZXJyb3JgOyBcXFxuICAgICAgICAgICAgQ1JFQVRFIERFRklORVIgPSBDVVJSRU5UX1VTRVIgUFJPQ0VEVVJFIGBfX21iX19gLmBsb2dfZXJyb3JgKG1zZyBURVhUKSBcXFxuICAgICAgICAgICAgQkVHSU4gXFxcbiAgICAgICAgICAgICAgICBJTlNFUlQgSU5UTyBgX19tYl9fYC5gbG9nYCAoYHR5cGVgLCBgbXNnYCkgVkFMVUVTICgnMycgLCBtc2cpOyBcXFxuICAgICAgICAgICAgRU5EIFxcXG4gICAgICAgIFwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlnKjmlbDmja7lupPkuK3orrDlvZXml6Xlv5dcbiAgICAgKi9cbiAgICBhc3luYyBsb2cobXNnOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5fbXlzcWxDb24ucXVlcnkoXCJDQUxMIGBfX21iX19gLmBsb2dgKD8pXCIsIFttc2ddKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlnKjmlbDmja7lupPkuK3orrDlvZUg6ZSZ6K+v5pel5b+XXG4gICAgICovXG4gICAgYXN5bmMgZXJyb3IobXNnOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5fbXlzcWxDb24ucXVlcnkoXCJDQUxMIGBfX21iX19gLmBsb2dfZXJyb3JgKD8pXCIsIFttc2ddKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlnKjmlbDmja7lupPkuK3orrDlvZUg6K2m5ZGK5pel5b+XXG4gICAgICovXG4gICAgYXN5bmMgd2FybmluZyhtc2c6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLl9teXNxbENvbi5xdWVyeShcIkNBTEwgYF9fbWJfX2AuYGxvZ193YXJuaW5nYCg/KVwiLCBbbXNnXSk7XG4gICAgfVxufSJdfQ==
