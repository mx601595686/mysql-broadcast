"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseExportService_1 = require("./BaseExportService");
const es = require("eventspace");
const _ = require("lodash");
class Broadcast extends BaseExportService_1.default {
    constructor() {
        super(...arguments);
        this._receivePath = new Map();
        this._es = new es.EventSpace();
        this.broadcast = this.export('broadcast', (data) => {
            if (!_.isString(data.path)) {
                throw new Error(`广播路径必须为为字符串`);
            }
            this._es.send(data.path, data.data);
        });
        this.receive = this.export('receive', (data, socket) => {
            if (!_.isString(data.path)) {
                throw new Error(`广播路径必须为为字符串`);
            }
            let receiveList = this._receivePath.get(socket.id);
            if (receiveList === undefined) {
                receiveList = new Set();
                this._receivePath.set(socket.id, receiveList);
            }
            if (receiveList.has(data.path)) {
                throw new Error(`不可以重复注册了广播监听器。路径：${data.path}`);
            }
            else {
                receiveList.add(data.path);
                const pathArray = data.path.split('.');
                pathArray.push(socket.id);
                this._es.receive(pathArray, (data) => {
                    socket.emit('receiveBroadcast', data.path, data);
                });
            }
        });
    }
    onDisconnect(socket) {
        const receiveList = this._receivePath.get(socket.id);
        if (receiveList) {
            for (let path of receiveList) {
                const pathArray = path.split('.');
                pathArray.push(socket.id);
                this._es.cancel(pathArray);
            }
            this._receivePath.delete(socket.id);
        }
    }
}
exports.default = Broadcast;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QkFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QyxDQUFDO0lBQ0wsQ0FBQztDQUNKO0FBbkRELDRCQW1EQyIsImZpbGUiOiJXZWJTb2NrZXQvQnJvYWRjYXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2VFeHBvcnRTZXJ2aWNlIGZyb20gJy4vQmFzZUV4cG9ydFNlcnZpY2UnO1xuaW1wb3J0IGVzID0gcmVxdWlyZSgnZXZlbnRzcGFjZScpO1xuaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuLyoqXG4gKiDnlKjkuo7lkJHlrqLmiLfnq6/mj5Dkvpvlub/mkq3mnI3liqEgICAgXG4gKiDmj5DkvpvnmoTmjqXlj6PvvJogICAgIFxuICogYnJvYWRjYXN077ya5ZCR5YW25LuWc29ja2V05bm/5pKt5pWw5o2uICAgIFxuICogcmVjZWl2Ze+8muebkeWQrOaMh+Wumui3r+W+hOS4iueahOW5v+aSrea2iOaBryAgICBcbiAqIHJlY2VpdmVCcm9hZGNhc3TvvJrlkJFzb2NrZXTlj5HpgIHlub/mkq3mlbDmja4gICAgXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBCcm9hZGNhc3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJvYWRjYXN0IGV4dGVuZHMgQmFzZUV4cG9ydFNlcnZpY2Uge1xuXG4gICAgLy/kv53lrZjmjqXlj6PopoHnm5HlkKznmoTot6/lvoTliJfooajvvIxrZXnmmK9zb2NrZXQuaWTvvIx2YWx1ZeaYr3BhdGjliJfooahcbiAgICBwcml2YXRlIF9yZWNlaXZlUGF0aDogTWFwPHN0cmluZywgU2V0PHN0cmluZz4+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHJpdmF0ZSBfZXMgPSBuZXcgZXMuRXZlbnRTcGFjZSgpO1xuXG4gICAgLy/lkJHlhbbku5bmjqXlj6Plub/mkq3mlbDmja7jgIJwYXRo77ya6KaB5bm/5pKt55qE6Lev5b6EXG4gICAgcHJpdmF0ZSBicm9hZGNhc3QgPSB0aGlzLmV4cG9ydCgnYnJvYWRjYXN0JywgKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICBpZiAoIV8uaXNTdHJpbmcoZGF0YS5wYXRoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDlub/mkq3ot6/lvoTlv4XpobvkuLrkuLrlrZfnrKbkuLJgKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VzLnNlbmQoZGF0YS5wYXRoLCBkYXRhLmRhdGEpO1xuICAgIH0pO1xuICAgIFxuICAgIC8v55uR5ZCs5oyH5a6a6Lev5b6E5LiK55qE5bm/5pKt5raI5oGvXG4gICAgcHJpdmF0ZSByZWNlaXZlID0gdGhpcy5leHBvcnQoJ3JlY2VpdmUnLCAoZGF0YTogYW55LCBzb2NrZXQ6IFNvY2tldElPLlNvY2tldCkgPT4ge1xuICAgICAgICBpZiAoIV8uaXNTdHJpbmcoZGF0YS5wYXRoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDlub/mkq3ot6/lvoTlv4XpobvkuLrkuLrlrZfnrKbkuLJgKVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlY2VpdmVMaXN0ID0gdGhpcy5fcmVjZWl2ZVBhdGguZ2V0KHNvY2tldC5pZCk7XG4gICAgICAgIGlmIChyZWNlaXZlTGlzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZWNlaXZlTGlzdCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVQYXRoLnNldChzb2NrZXQuaWQsIHJlY2VpdmVMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWNlaXZlTGlzdC5oYXMoZGF0YS5wYXRoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDkuI3lj6/ku6Xph43lpI3ms6jlhozkuoblub/mkq3nm5HlkKzlmajjgILot6/lvoTvvJoke2RhdGEucGF0aH1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlY2VpdmVMaXN0LmFkZChkYXRhLnBhdGgpO1xuICAgICAgICAgICAgY29uc3QgcGF0aEFycmF5ID0gZGF0YS5wYXRoLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBwYXRoQXJyYXkucHVzaChzb2NrZXQuaWQpO1xuICAgICAgICAgICAgdGhpcy5fZXMucmVjZWl2ZShwYXRoQXJyYXksIChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgncmVjZWl2ZUJyb2FkY2FzdCcsIGRhdGEucGF0aCwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8g5aaC5p6c5o6l5Y+j6L+e5o6l5pat5byA77yM5Y+W5raI6K+l5o6l5Y+j5rOo5YaM6L+H55qE5omA5pyJ55uR5ZCs6Lev5b6EXG4gICAgcHJvdGVjdGVkIG9uRGlzY29ubmVjdChzb2NrZXQ6IFNvY2tldElPLlNvY2tldCl7XG4gICAgICAgIGNvbnN0IHJlY2VpdmVMaXN0ID0gdGhpcy5fcmVjZWl2ZVBhdGguZ2V0KHNvY2tldC5pZCk7XG4gICAgICAgIGlmIChyZWNlaXZlTGlzdCkge1xuICAgICAgICAgICAgZm9yIChsZXQgcGF0aCBvZiByZWNlaXZlTGlzdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhBcnJheSA9IHBhdGguc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICBwYXRoQXJyYXkucHVzaChzb2NrZXQuaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VzLmNhbmNlbChwYXRoQXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZVBhdGguZGVsZXRlKHNvY2tldC5pZCk7XG4gICAgICAgIH1cbiAgICB9XG59Il19
