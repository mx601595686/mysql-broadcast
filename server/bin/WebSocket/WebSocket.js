"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_starter_1 = require("service-starter");
const http = require("http");
const io = require("socket.io");
class WebSocket extends service_starter_1.ServiceModule {
    get ws() {
        if (this._ws === undefined)
            throw new Error('发现有服务在WebSocket启动之前就尝试获取连接');
        return this._ws;
    }
    onStart() {
        return new Promise((resolve, reject) => {
            this._http = http.createServer();
            this._ws = io(this._http, { serveClient: false });
            this._http.listen(3000, (err) => {
                err ? reject(err) : resolve();
            });
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            if (this._ws) {
                this._ws.close(() => {
                    if (this._http) {
                        this._http.close((err) => {
                            this._ws = undefined;
                            this._http = undefined;
                            err ? reject(err) : resolve();
                        });
                    }
                    else {
                        resolve();
                    }
                });
            }
            else {
                resolve();
            }
        });
    }
}
exports.default = WebSocket;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldlYlNvY2tldC9XZWJTb2NrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxREFBcUQ7QUFDckQsNkJBQThCO0FBQzlCLGdDQUFpQztBQVVqQyxlQUErQixTQUFRLCtCQUFhO0lBS2hELElBQUksRUFBRTtRQUNGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtRQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBRUQsT0FBTztRQUNILE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO1lBQ2hDLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFVO2dCQUMvQixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO29CQUNYLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO3dCQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBVTs0QkFDeEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7NEJBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDOzRCQUN2QixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDO3dCQUNsQyxDQUFDLENBQUMsQ0FBQztvQkFDUCxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLE9BQU8sRUFBRSxDQUFDO29CQUNkLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osT0FBTyxFQUFFLENBQUM7WUFDZCxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUF4Q0QsNEJBd0NDIiwiZmlsZSI6IldlYlNvY2tldC9XZWJTb2NrZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2csIFNlcnZpY2VNb2R1bGUgfSBmcm9tIFwic2VydmljZS1zdGFydGVyXCI7XG5pbXBvcnQgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmltcG9ydCBpbyA9IHJlcXVpcmUoJ3NvY2tldC5pbycpO1xuXG4vKipcbiAqIOWQkeWklueVjOaPkOS+m3dlYnNvY2tldOacjeWKoeaOpeWPo+OAglxuICog5pq06Zyy5ZyoMzAwMOerr+WPo1xuICogXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgV2ViU29ja2V0XG4gKiBAZXh0ZW5kcyB7U2VydmljZU1vZHVsZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2ViU29ja2V0IGV4dGVuZHMgU2VydmljZU1vZHVsZSB7XG5cbiAgICBwcml2YXRlIF93czogU29ja2V0SU8uU2VydmVyIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX2h0dHA6IGh0dHAuU2VydmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgZ2V0IHdzKCkge1xuICAgICAgICBpZiAodGhpcy5fd3MgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5Y+R546w5pyJ5pyN5Yqh5ZyoV2ViU29ja2V05ZCv5Yqo5LmL5YmN5bCx5bCd6K+V6I635Y+W6L+e5o6lJylcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dzO1xuICAgIH1cblxuICAgIG9uU3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9odHRwID0gaHR0cC5jcmVhdGVTZXJ2ZXIoKVxuICAgICAgICAgICAgdGhpcy5fd3MgPSBpbyh0aGlzLl9odHRwLCB7IHNlcnZlQ2xpZW50OiBmYWxzZSB9KTtcbiAgICAgICAgICAgIHRoaXMuX2h0dHAubGlzdGVuKDMwMDAsIChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25TdG9wKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3dzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd3MuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faHR0cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faHR0cC5jbG9zZSgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2h0dHAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==
