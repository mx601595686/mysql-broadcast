"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_starter_1 = require("service-starter");
class BaseExportService extends service_starter_1.ServiceModule {
    constructor() {
        super(...arguments);
        this._exportMethod = new Map();
        this.socketList = new Map();
    }
    get _ws() {
        return this.services.WebSocket.ws;
    }
    onStart() {
        return new Promise((resolve, reject) => {
            this.nsp = this._ws.of(`/${this.name}`);
            this.nsp.on('connection', (socket) => {
                this.socketList.set(socket.id, socket);
                this.onConnection(socket);
                for (let [name, func] of this._exportMethod.entries()) {
                    socket.on(name, async (data, callback) => {
                        try {
                            const result = await func(data, socket);
                            callback(undefined, result);
                        }
                        catch (error) {
                            callback(error.toString());
                        }
                    });
                }
                socket.on('disconnet', () => {
                    this.socketList.delete(socket.id);
                    this.onDisconnect(socket);
                });
            });
            resolve();
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            this.nsp = undefined;
            this.socketList.clear();
            resolve();
        });
    }
    export(name, func) {
        this._exportMethod.set(name, func);
        return func;
    }
    onConnection(socket) { }
    onDisconnect(socket) { }
}
exports.default = BaseExportService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldlYlNvY2tldC9CYXNlRXhwb3J0U2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFEQUFxRDtBQU9yRCx1QkFBZ0QsU0FBUSwrQkFBYTtJQUFyRTs7UUFPcUIsa0JBQWEsR0FBMEIsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQWdCeEQsZUFBVSxHQUFpQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBcUVuRSxDQUFDO0lBMUZHLElBQVksR0FBRztRQUNYLE1BQU0sQ0FBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQXVCLENBQUMsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUFxQkQsT0FBTztRQUNILE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUV4QyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNO2dCQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUV2QyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUcxQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNwRCxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBUyxFQUFFLFFBQWtCO3dCQUNoRCxJQUFJLENBQUM7NEJBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDOzRCQUN4QyxRQUFRLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO3dCQUNoQyxDQUFDO3dCQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7NEJBQ2IsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO3dCQUMvQixDQUFDO29CQUNMLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUM7Z0JBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDOUIsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztZQUVILE9BQU8sRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDeEIsT0FBTyxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFVUyxNQUFNLENBQUMsSUFBWSxFQUFFLElBQWM7UUFDekMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQVFTLFlBQVksQ0FBQyxNQUF1QixJQUFJLENBQUM7SUFRekMsWUFBWSxDQUFDLE1BQXVCLElBQUksQ0FBQztDQUN0RDtBQTVGRCxvQ0E0RkMiLCJmaWxlIjoiV2ViU29ja2V0L0Jhc2VFeHBvcnRTZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nLCBTZXJ2aWNlTW9kdWxlIH0gZnJvbSBcInNlcnZpY2Utc3RhcnRlclwiO1xuaW1wb3J0IFdlYlNvY2tldCBmcm9tICcuL1dlYlNvY2tldCc7XG5cblxuLyoqXG4gKiDmiYDmnInkvb/nlKh3ZWJzb2NrZXTlkJHlpJbmj5DkvpvmnI3liqHnmoTln7rnsbtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZUV4cG9ydFNlcnZpY2UgZXh0ZW5kcyBTZXJ2aWNlTW9kdWxlIHtcblxuICAgIHByaXZhdGUgZ2V0IF93cygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNlcnZpY2VzLldlYlNvY2tldCBhcyBXZWJTb2NrZXQpLndzO1xuICAgIH1cblxuICAgIC8vIOS/neWtmOWQkeWkluaPkOS+m+acjeWKoeeahOaWueazle+8jOmAmui/h+acrOexu+eahGV4cG9ydOaWueazlei/m+ihjOazqOWGjFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2V4cG9ydE1ldGhvZDogTWFwPHN0cmluZywgRnVuY3Rpb24+ID0gbmV3IE1hcCgpO1xuXG4gICAgLyoqXG4gICAgICog5b2T5YmN55qEc29ja2V0Lmlv5ZG95ZCN56m66Ze077yM5ZG95ZCN56m66Ze06buY6K6k5piv5pyN5Yqh5ZCNXG4gICAgICogXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEB0eXBlIHtTb2NrZXRJTy5OYW1lc3BhY2V9XG4gICAgICovXG4gICAgcHJvdGVjdGVkIG5zcDogU29ja2V0SU8uTmFtZXNwYWNlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICog5L+d5a2Y5bu656uL5LiK6L+e5o6l55qE5o6l5Y+j5YiX6KGo44CCa2V55pivc29ja2V0LmlkXG4gICAgICogXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBTb2NrZXRJTy5Tb2NrZXQ+fVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzb2NrZXRMaXN0OiBNYXA8c3RyaW5nLCBTb2NrZXRJTy5Tb2NrZXQ+ID0gbmV3IE1hcCgpO1xuXG4gICAgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMubnNwID0gdGhpcy5fd3Mub2YoYC8ke3RoaXMubmFtZX1gKTtcblxuICAgICAgICAgICAgdGhpcy5uc3Aub24oJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXRMaXN0LnNldChzb2NrZXQuaWQsIHNvY2tldCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbihzb2NrZXQpO1xuXG4gICAgICAgICAgICAgICAgLy8g5qC55o2u5pq06Zyy55qE5pyN5Yqh5pa55rOV5ZCN5rOo5YaM5pyN5YqhXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgW25hbWUsIGZ1bmNdIG9mIHRoaXMuX2V4cG9ydE1ldGhvZC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0Lm9uKG5hbWUsIGFzeW5jIChkYXRhOiBhbnksIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmdW5jKGRhdGEsIHNvY2tldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc29ja2V0Lm9uKCdkaXNjb25uZXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0TGlzdC5kZWxldGUoc29ja2V0LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3Qoc29ja2V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uU3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMubnNwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXRMaXN0LmNsZWFyKCk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWQkeWkluaatOmcsuacjeWKoVxuICAgICAqIFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuYW1lIOimgeazqOWGjOeahOacjeWKoeWQjeensFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMg6KaB5rOo5YaM55qE5pyN5YqhXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZXhwb3J0KG5hbWU6IHN0cmluZywgZnVuYzogRnVuY3Rpb24pOiBGdW5jdGlvbiB7XG4gICAgICAgIHRoaXMuX2V4cG9ydE1ldGhvZC5zZXQobmFtZSwgZnVuYyk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW9k+acieaWsOeahOaOpeWPo+i/nuaOpeS4iueahOaXtuWAmVxuICAgICAqIFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1NvY2tldElPLlNvY2tldH0gc29ja2V0IOaWsOeahOi/nuaOpVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvbkNvbm5lY3Rpb24oc29ja2V0OiBTb2NrZXRJTy5Tb2NrZXQpIHsgfVxuXG4gICAgLyoqXG4gICAgICog5b2T5pyJ5o6l5Y+j5pat5byA6L+e5o6l55qE5pe25YCZXG4gICAgICogXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7U29ja2V0SU8uU29ja2V0fSBzb2NrZXQg6KaB6KKr5pat5byA55qE6L+e5o6lXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uRGlzY29ubmVjdChzb2NrZXQ6IFNvY2tldElPLlNvY2tldCkgeyB9XG59Il19
