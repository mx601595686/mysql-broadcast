"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_starter_1 = require("service-starter");
const _ = require("lodash");
const TriggerType_1 = require("./TriggerType");
class DbChangeListener extends service_starter_1.ServiceModule {
    constructor() {
        super(...arguments);
        this.registeredListener = {};
    }
    get _tableInfo() {
        return this.services.QueryTableInfo.tableInfo;
    }
    get _triggerCreator() {
        return this.services.TriggerCreator;
    }
    async onStart() {
        this.services.ChangedDataReceiver.onData = this._dispatch.bind(this);
    }
    async onStop() {
        this.services.ChangedDataReceiver.onData = undefined;
    }
    async listen(callback, schema, table, type, field) {
        if (type === TriggerType_1.default.update) {
            if (field === undefined)
                throw new Error('update 类型的监听器，未提供要监听的字段（field）');
            this._check_table_and_fields_exists(schema, table, field);
        }
        else {
            this._check_table_and_fields_exists(schema, table);
            field = '-';
        }
        let listener = _.get(this.registeredListener, [schema, table, type, field]);
        if (listener === undefined) {
            listener = new Set();
            listener.add(callback);
            _.set(this.registeredListener, [schema, table, type, field], listener);
            switch (type) {
                case TriggerType_1.default.insert:
                    await this._triggerCreator.createInsertTrigger(schema, table);
                    break;
                case TriggerType_1.default.delete:
                    await this._triggerCreator.createDeleteTrigger(schema, table);
                    break;
                case TriggerType_1.default.update:
                    const fields = Object.keys(_.get(this.registeredListener, [schema, table, type]));
                    await this._triggerCreator.createUpdateTrigger(schema, table, fields);
                    break;
            }
        }
        else {
            if (listener.has(callback))
                throw new Error('相同的回调函数被重复注册');
            listener.add(callback);
        }
    }
    async remove(callback, schema, table, type, field = '_') {
        const listener = _.get(this.registeredListener, [schema, table, type, field]);
        if (listener !== undefined) {
            listener.delete(callback);
            if (listener.size === 0) {
                const target = _.get(this.registeredListener, [schema, table, type]);
                delete target[field];
                switch (type) {
                    case TriggerType_1.default.insert:
                        await this._triggerCreator.removeInsertTrigger(schema, table);
                        break;
                    case TriggerType_1.default.delete:
                        await this._triggerCreator.removeDeleteTrigger(schema, table);
                        break;
                    case TriggerType_1.default.update:
                        const fields = Object.keys(_.get(this.registeredListener, [schema, table, type]));
                        if (fields.length === 0)
                            await this._triggerCreator.removeUpdateTrigger(schema, table);
                        else
                            await this._triggerCreator.createUpdateTrigger(schema, table, fields);
                        break;
                }
            }
        }
    }
    _dispatch(data) {
        const emit = (listener) => {
            if (listener) {
                for (let item of listener.values()) {
                    item(data);
                }
            }
        };
        if (data.type === TriggerType_1.default.update) {
            for (let item of data.changedFields) {
                emit(_.get(this.registeredListener, [data.schema, data.table, data.type, item]));
            }
        }
        else {
            emit(_.get(this.registeredListener, [data.schema, data.table, data.type, '_']));
        }
    }
    _check_table_and_fields_exists(schema, table, field) {
        const tb = _.get(this._tableInfo, [schema, table]);
        if (tb === undefined) {
            throw new Error(`数据库[${schema}] 下的表 [${table}] 不存在，无法创建Trigger`);
        }
        if (field !== undefined) {
            if (tb[field] !== true) {
                throw new Error(`数据库[${schema}] 下的表 [${table}] 下的字段 [${field}] 不存在，无法创建Trigger`);
            }
        }
    }
}
exports.default = DbChangeListener;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
