"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_starter_1 = require("service-starter");
const _ = require("lodash");
const TriggerType_1 = require("./TriggerType");
class TriggerCreator extends service_starter_1.ServiceModule {
    get _mysqlCon() {
        return this.services.MysqlConnection;
    }
    get _tableInfo() {
        return this.services.QueryTableInfo.tableInfo;
    }
    onStart() {
        return Promise.resolve();
    }
    async createInsertTrigger(schema, table) {
        const serialized = this._statement_serialize_data(schema, table, TriggerType_1.default.insert);
        const send = this._statement_send_data();
        const triggerName = `\`${schema}\`.\`__mb__${table}__insert__trigger\``;
        const sql = `
            DROP TRIGGER IF EXISTS ${triggerName};
            CREATE DEFINER = CURRENT_USER TRIGGER ${triggerName} AFTER INSERT ON \`${table}\` FOR EACH ROW
            BEGIN
                ${serialized.changedFields}
                ${serialized.toArray}
                ${send}
            END
        `;
        await this._mysqlCon.query(sql);
    }
    async createDeleteTrigger(schema, table) {
        const serialized = this._statement_serialize_data(schema, table, TriggerType_1.default.delete);
        const send = this._statement_send_data();
        const triggerName = `\`${schema}\`.\`__mb__${table}__delete__trigger\``;
        const sql = `
            DROP TRIGGER IF EXISTS ${triggerName};
            CREATE DEFINER = CURRENT_USER TRIGGER ${triggerName} AFTER DELETE ON \`${table}\` FOR EACH ROW
            BEGIN
                ${serialized.changedFields}
                ${serialized.toArray}
                ${send}
            END
        `;
        await this._mysqlCon.query(sql);
    }
    async createUpdateTrigger(schema, table, fields) {
        const serialized = this._statement_serialize_data(schema, table, TriggerType_1.default.update);
        const send = this._statement_send_data();
        const triggerName = `\`${schema}\`.\`__mb__${table}__update__trigger\``;
        const fieldsIsChange = fields.reduce((pre, cur) => {
            return `
                ${pre}
                IF \`NEW\`.\`${cur}\` != \`OLD\`.\`${cur}\` THEN
                    SET @changed_fields = JSON_ARRAY_APPEND(@changed_fields, '$', '${cur}');
                END IF;
            `;
        }, '');
        const sql = `
            DROP TRIGGER IF EXISTS ${triggerName};
            CREATE DEFINER = CURRENT_USER TRIGGER ${triggerName} AFTER UPDATE ON \`${table}\` FOR EACH ROW
            BEGIN
                ${serialized.changedFields}
                ${fieldsIsChange}
                IF JSON_LENGTH(@changed_fields) > 0 THEN
                    ${serialized.toArray}
                    ${send}
                END IF;
            END
        `;
        await this._mysqlCon.query(sql);
    }
    async removeInsertTrigger(schema, table) {
        const triggerName = `\`${schema}\`.\`__mb__${table}__insert__trigger\``;
        await this._mysqlCon.query(`DROP TRIGGER IF EXISTS ${triggerName};`);
    }
    async removeDeleteTrigger(schema, table) {
        const triggerName = `\`${schema}\`.\`__mb__${table}__delete__trigger\``;
        await this._mysqlCon.query(`DROP TRIGGER IF EXISTS ${triggerName};`);
    }
    async removeUpdateTrigger(schema, table) {
        const triggerName = `\`${schema}\`.\`__mb__${table}__update__trigger\``;
        await this._mysqlCon.query(`DROP TRIGGER IF EXISTS ${triggerName};`);
    }
    _statement_serialize_data(schema, table, type) {
        const args = (isNew) => {
            return Object.keys(_.get(this._tableInfo, [schema, table]))
                .reduce((pre, cur, index) => {
                const result = `, '${cur}', ${isNew ? '`NEW`' : '`OLD`'}.\`${cur}\``;
                if (index === 0) {
                    return pre + result.slice(1);
                }
                else {
                    return pre + result;
                }
            }, '');
        };
        const newData = type != TriggerType_1.default.delete ? `SELECT JSON_OBJECT(${args(true)})  INTO @new_data;` : 'set @new_data = NULL;';
        const oldData = type != TriggerType_1.default.insert ? `SELECT JSON_OBJECT(${args(false)}) INTO @old_data;` : 'set @old_data = NULL;';
        return {
            changedFields: "set @changed_fields = JSON_ARRAY();",
            toArray: `
                ${newData}
                ${oldData}
                SET @value = JSON_ARRAY(${type}, '${schema}', '${table}', @changed_fields, @new_data, @old_data);
            `
        };
    }
    _statement_send_data() {
        return `
            SELECT http_post('http://localhost:2233', @value) INTO @return;
            IF @return != 200 THEN
                CALL \`__mb__\`.\`log_error\`(CONCAT_WS('\n', '向服务器发送数据异常。', '返回状态码：', @return, '发送的数据：', @value));
            END IF; 
        `;
    }
}
exports.default = TriggerCreator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
