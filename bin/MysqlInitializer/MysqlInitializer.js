"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseModule_1 = require("../common/BaseModule");
const child_process = require("child_process");
const mysql = require("mysql");
class MysqlInitializer extends BaseModule_1.default {
    start() {
        return this.startMysql();
    }
    startMysql() {
        return new Promise((resolve, reject) => {
            console.log('[${}]开始尝试启动MySQL服务');
            this._mysqld = child_process.spawn('/usr/local/bin/docker-entrypoint.sh', ["mysqld"]);
            this._mysql = mysql.createConnection({
                user: 'root',
            });
            this._mysqld.stdout.on('data', (data) => {
                console.log(`mysqld-stdout: ${data}`);
            });
            this._mysqld.stderr.on('data', (data) => {
                console.log(`mysqld-stderr: ${data}`);
            });
            let timer;
            let retry = 0;
            timer = setInterval(() => {
                if (retry++ > 3) {
                    this._mysql.connect(function (err) {
                        if (!err) {
                            clearInterval(timer);
                            resolve();
                        }
                    });
                }
                else {
                    clearInterval(timer);
                    reject();
                }
            }, 10000);
        });
    }
    checkUDF() {
        return new Promise((resolve, reject) => {
        });
    }
    destroy() {
        return new Promise((resolve, reject) => {
            this._mysqld.kill();
            this._mysqld.once('exit', (err, code) => {
                resolve();
            });
            setTimeout(function () {
                resolve();
            }, 3000);
        });
    }
}
exports.default = MysqlInitializer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk15c3FsSW5pdGlhbGl6ZXIvTXlzcWxJbml0aWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFEQUE4QztBQUM5QywrQ0FBZ0Q7QUFDaEQsK0JBQWdDO0FBU2hDLHNCQUFzQyxTQUFRLG9CQUFVO0lBS3BELEtBQUs7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFHTyxVQUFVO1FBQ2QsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1lBRWpDLElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFHdEYsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ2pDLElBQUksRUFBRSxNQUFNO2FBQ2YsQ0FBQyxDQUFDO1lBR0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUk7Z0JBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLElBQUksRUFBRSxDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSTtnQkFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUMxQyxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksS0FBbUIsQ0FBQztZQUN4QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7WUFFZCxLQUFLLEdBQUcsV0FBVyxDQUFDO2dCQUVoQixFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRzt3QkFDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDOzRCQUNOLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzs0QkFDckIsT0FBTyxFQUFFLENBQUM7d0JBQ2QsQ0FBQztvQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFDUCxDQUFDO2dCQUFBLElBQUksQ0FBQSxDQUFDO29CQUNGLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDckIsTUFBTSxFQUFFLENBQUM7Z0JBQ2IsQ0FBQztZQUNMLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUdPLFFBQVE7UUFDWixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtRQUVuQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFHRCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSTtnQkFDaEMsT0FBTyxFQUFFLENBQUM7WUFDZCxDQUFDLENBQUMsQ0FBQTtZQUNGLFVBQVUsQ0FBQztnQkFDUCxPQUFPLEVBQUUsQ0FBQztZQUNkLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBcEVELG1DQW9FQyIsImZpbGUiOiJNeXNxbEluaXRpYWxpemVyL015c3FsSW5pdGlhbGl6ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZU1vZHVsZSBmcm9tIFwiLi4vY29tbW9uL0Jhc2VNb2R1bGVcIjtcbmltcG9ydCBjaGlsZF9wcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xuaW1wb3J0IG15c3FsID0gcmVxdWlyZSgnbXlzcWwnKTtcblxuLyoqXG4gKiBteXNxbCDliJ3lp4vljJblmahcbiAqIFxuICogQGV4cG9ydFxuICogQGNsYXNzIE15c3FsSW5pdGlhbGl6ZXJcbiAqIEBleHRlbmRzIHtCYXNlTW9kdWxlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeXNxbEluaXRpYWxpemVyIGV4dGVuZHMgQmFzZU1vZHVsZSB7XG5cbiAgICBwcml2YXRlIF9teXNxbGQ6IGNoaWxkX3Byb2Nlc3MuQ2hpbGRQcm9jZXNzO1xuICAgIHByaXZhdGUgX215c3FsOiBteXNxbC5JQ29ubmVjdGlvbjtcblxuICAgIHN0YXJ0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydE15c3FsKCk7XG4gICAgfVxuXG4gICAgLy8g5ZCv5YqobXlzcWxcbiAgICBwcml2YXRlIHN0YXJ0TXlzcWwoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnWyR7fV3lvIDlp4vlsJ3or5XlkK/liqhNeVNRTOacjeWKoScpXG4gICAgICAgICAgICAvLyDlkK/liqhteXNxbGTmnI3liqFcbiAgICAgICAgICAgIHRoaXMuX215c3FsZCA9IGNoaWxkX3Byb2Nlc3Muc3Bhd24oJy91c3IvbG9jYWwvYmluL2RvY2tlci1lbnRyeXBvaW50LnNoJywgW1wibXlzcWxkXCJdKTtcblxuICAgICAgICAgICAgLy8g6L+e5o6lbXlzcWxcbiAgICAgICAgICAgIHRoaXMuX215c3FsID0gbXlzcWwuY3JlYXRlQ29ubmVjdGlvbih7XG4gICAgICAgICAgICAgICAgdXNlcjogJ3Jvb3QnLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIOeUqOS6jua1i+ivleaJk+WNsFxuICAgICAgICAgICAgdGhpcy5fbXlzcWxkLnN0ZG91dC5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYG15c3FsZC1zdGRvdXQ6ICR7ZGF0YX1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fbXlzcWxkLnN0ZGVyci5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYG15c3FsZC1zdGRlcnI6ICR7ZGF0YX1gKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgdGltZXI6IE5vZGVKUy5UaW1lcjtcbiAgICAgICAgICAgIGxldCByZXRyeSA9IDA7XG5cbiAgICAgICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8v5pyA5aSa5bCd6K+VM+asoVxuICAgICAgICAgICAgICAgIGlmIChyZXRyeSsrID4gMykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9teXNxbC5jb25uZWN0KGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyKXsgIC8v6L+e5o6l5LiK5LqGXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAxMDAwMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8v5qOA5p+ldWRm5pa55rOV5piv5ZCm5bey57uP5q2j56Gu5a6J6KOF5LqGXG4gICAgcHJpdmF0ZSBjaGVja1VERigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vdGhpcy5fbXlzcWwucVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyDnu4jmraJteXNxbCDov5DooYxcbiAgICBkZXN0cm95KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fbXlzcWxkLmtpbGwoKTtcbiAgICAgICAgICAgIHRoaXMuX215c3FsZC5vbmNlKCdleGl0JywgKGVyciwgY29kZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSJdfQ==
