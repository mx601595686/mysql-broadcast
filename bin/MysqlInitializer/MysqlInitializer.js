"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const mysql = require("mysql");
const service_starter_1 = require("service-starter");
class MysqlInitializer extends service_starter_1.ServiceModule {
    async onStart() {
        await this.startMysqld();
        await this.checkUDF();
    }
    startMysqld() {
        return new Promise((resolve, reject) => {
            service_starter_1.log.l('正在启动 MySQL Deamon');
            this._mysqld = child_process.spawn('/usr/local/bin/docker-entrypoint.sh', ["mysqld"]);
            this._mysqld.on('error', this.emit.bind(this, 'error'));
            let retry = 0;
            const timer = setInterval(() => {
                if (retry++ < 3) {
                    service_starter_1.log.l(`开始尝试第${retry}次连接mysql`);
                    const con = mysql.createConnection({
                        user: 'root',
                        connectTimeout: 9500,
                        multipleStatements: true,
                        socketPath: '/var/run/mysqld/mysqld.sock'
                    });
                    con.connect((err) => {
                        if (err) {
                            service_starter_1.log.e(`第${retry}次连接失败: `, err);
                        }
                        else {
                            service_starter_1.log.l('MySQL Deamon启动成功！');
                            service_starter_1.log.l('成功连接到MySQL！');
                            this._mysql = con;
                            clearInterval(timer);
                            resolve();
                        }
                    });
                }
                else {
                    clearInterval(timer);
                    reject(new Error('无法连接到MySQL，超过了重试次数'));
                }
            }, 10000);
        });
    }
    checkUDF() {
        return new Promise((resolve, reject) => {
            service_starter_1.log.l('开始检查 mysql-udf-http');
            this._mysql.query("select * from mysql.func where dl = 'mysql-udf-http.so'", (err, result, fields) => {
                if (err) {
                    reject(new Error('检查mysql-udf-http配置时发生异常' + err));
                }
                else if (result.length === 4) {
                    service_starter_1.log.l('mysql-udf-http正常');
                    resolve();
                }
                else {
                    service_starter_1.log.l('开始配置mysql-udf-http');
                    this._mysql.query(`
                        # 删除已有的
                            DROP FUNCTION IF EXISTS http_get;
                            DROP FUNCTION IF EXISTS http_post;
                            DROP FUNCTION IF EXISTS http_put;
                            DROP FUNCTION IF EXISTS http_delete;
                            
                            # 创建
                            create function http_get returns string soname 'mysql-udf-http.so';
                            create function http_post returns string soname 'mysql-udf-http.so';
                            create function http_put returns string soname 'mysql-udf-http.so';
                            create function http_delete returns string soname 'mysql-udf-http.so';
                        `, err => {
                        if (err) {
                            reject(new Error('配置mysql-udf-http失败' + err));
                        }
                        else {
                            service_starter_1.log.l('配置mysql-udf-http完成');
                            resolve();
                        }
                    });
                }
            });
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            service_starter_1.log.l('正在终止mysql服务');
            if (this._mysqld === undefined) {
                resolve();
                return;
            }
            if (this._mysql)
                this._mysql.end();
            this._mysqld.kill();
            this._mysqld.once('exit', (err, code) => {
                if (err) {
                    reject(new Error('终止mysql服务失败：' + err));
                }
                else {
                    resolve();
                }
            });
            setTimeout(() => {
                this._mysql = undefined;
                this._mysqld = undefined;
                reject(new Error('终止mysql服务失败：终止超时'));
            }, 5000);
        });
    }
    onHealthChecking() {
        return new Promise((resolve) => {
            this._mysql.query('select 1', (err) => {
                if (err) {
                    resolve(service_starter_1.HealthStatus.unhealthy);
                }
                else {
                    resolve(service_starter_1.HealthStatus.success);
                }
            });
        });
    }
    getConnection() {
        return this._mysql;
    }
}
exports.default = MysqlInitializer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
