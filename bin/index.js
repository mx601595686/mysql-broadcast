"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_starter_1 = require("service-starter");
const MysqlDaemon_1 = require("./MySQL/MysqlDaemon");
const MysqlConnection_1 = require("./MySQL/MysqlConnection");
const MysqlHttpPlugin_1 = require("./MySQL/MysqlHttpPlugin");
const SystemLogger_1 = require("./SystemLogger/SystemLogger");
const ClearTrigger_1 = require("./DbChangeListener/ClearTrigger");
const QueryTableInfo_1 = require("./DbChangeListener/QueryTableInfo");
const DbChangeListener_1 = require("./DbChangeListener/DbChangeListener");
const TriggerCreator_1 = require("./DbChangeListener/TriggerCreator");
const ChangedDataReceiver_1 = require("./DbChangeListener/ChangedDataReceiver");
const WebSocket_1 = require("./WebSocket/WebSocket");
const QuerySql_1 = require("./WebSocket/QuerySql");
const Broadcast_1 = require("./WebSocket/Broadcast");
const ListenDbChanging_1 = require("./WebSocket/ListenDbChanging");
class MysqlBroadcast extends service_starter_1.ServicesManager {
}
const mb = new MysqlBroadcast();
mb.registerService(new MysqlDaemon_1.default());
mb.registerService(new MysqlConnection_1.default());
mb.registerService(new MysqlHttpPlugin_1.default());
mb.registerService(new SystemLogger_1.default());
mb.registerService(new QueryTableInfo_1.default());
mb.registerService(new ClearTrigger_1.default());
mb.registerService(new TriggerCreator_1.default());
mb.registerService(new ChangedDataReceiver_1.default());
mb.registerService(new DbChangeListener_1.default());
mb.registerService(new WebSocket_1.default());
mb.registerService(new QuerySql_1.default());
mb.registerService(new Broadcast_1.default());
mb.registerService(new ListenDbChanging_1.default());
mb.start();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscURBQWtEO0FBRWxELHFEQUE4QztBQUM5Qyw2REFBc0Q7QUFDdEQsNkRBQXNEO0FBRXRELDhEQUF1RDtBQUV2RCxrRUFBMkQ7QUFDM0Qsc0VBQStEO0FBQy9ELDBFQUFtRTtBQUNuRSxzRUFBK0Q7QUFDL0QsZ0ZBQXlFO0FBRXpFLHFEQUE4QztBQUM5QyxtREFBNEM7QUFDNUMscURBQThDO0FBQzlDLG1FQUE0RDtBQUU1RCxvQkFBcUIsU0FBUSxpQ0FBZTtDQUFJO0FBRWhELE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7QUFHaEMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLHFCQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSx5QkFBZSxFQUFFLENBQUMsQ0FBQztBQUMxQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUkseUJBQWUsRUFBRSxDQUFDLENBQUM7QUFHMUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLHNCQUFZLEVBQUUsQ0FBQyxDQUFDO0FBR3ZDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSx3QkFBYyxFQUFFLENBQUMsQ0FBQztBQUN6QyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksc0JBQVksRUFBRSxDQUFDLENBQUM7QUFDdkMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLHdCQUFjLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSw2QkFBbUIsRUFBRSxDQUFDLENBQUM7QUFDOUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLDBCQUFnQixFQUFFLENBQUMsQ0FBQztBQUczQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksbUJBQVMsRUFBRSxDQUFDLENBQUM7QUFDcEMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLGtCQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ25DLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxtQkFBUyxFQUFFLENBQUMsQ0FBQztBQUNwQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksMEJBQWdCLEVBQUUsQ0FBQyxDQUFDO0FBRTNDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcnZpY2VzTWFuYWdlciB9IGZyb20gXCJzZXJ2aWNlLXN0YXJ0ZXJcIjtcblxuaW1wb3J0IE15c3FsRGFlbW9uIGZyb20gXCIuL015U1FML015c3FsRGFlbW9uXCI7XG5pbXBvcnQgTXlzcWxDb25uZWN0aW9uIGZyb20gXCIuL015U1FML015c3FsQ29ubmVjdGlvblwiO1xuaW1wb3J0IE15c3FsSHR0cFBsdWdpbiBmcm9tIFwiLi9NeVNRTC9NeXNxbEh0dHBQbHVnaW5cIjtcblxuaW1wb3J0IFN5c3RlbUxvZ2dlciBmcm9tICcuL1N5c3RlbUxvZ2dlci9TeXN0ZW1Mb2dnZXInO1xuXG5pbXBvcnQgQ2xlYXJUcmlnZ2VyIGZyb20gXCIuL0RiQ2hhbmdlTGlzdGVuZXIvQ2xlYXJUcmlnZ2VyXCI7XG5pbXBvcnQgUXVlcnlUYWJsZUluZm8gZnJvbSBcIi4vRGJDaGFuZ2VMaXN0ZW5lci9RdWVyeVRhYmxlSW5mb1wiO1xuaW1wb3J0IERiQ2hhbmdlTGlzdGVuZXIgZnJvbSBcIi4vRGJDaGFuZ2VMaXN0ZW5lci9EYkNoYW5nZUxpc3RlbmVyXCI7XG5pbXBvcnQgVHJpZ2dlckNyZWF0b3IgZnJvbSBcIi4vRGJDaGFuZ2VMaXN0ZW5lci9UcmlnZ2VyQ3JlYXRvclwiO1xuaW1wb3J0IENoYW5nZWREYXRhUmVjZWl2ZXIgZnJvbSBcIi4vRGJDaGFuZ2VMaXN0ZW5lci9DaGFuZ2VkRGF0YVJlY2VpdmVyXCI7XG5cbmltcG9ydCBXZWJTb2NrZXQgZnJvbSAnLi9XZWJTb2NrZXQvV2ViU29ja2V0JztcbmltcG9ydCBRdWVyeVNxbCBmcm9tICcuL1dlYlNvY2tldC9RdWVyeVNxbCc7XG5pbXBvcnQgQnJvYWRjYXN0IGZyb20gJy4vV2ViU29ja2V0L0Jyb2FkY2FzdCc7XG5pbXBvcnQgTGlzdGVuRGJDaGFuZ2luZyBmcm9tICcuL1dlYlNvY2tldC9MaXN0ZW5EYkNoYW5naW5nJztcblxuY2xhc3MgTXlzcWxCcm9hZGNhc3QgZXh0ZW5kcyBTZXJ2aWNlc01hbmFnZXIgeyB9XG5cbmNvbnN0IG1iID0gbmV3IE15c3FsQnJvYWRjYXN0KCk7XG5cbi8vTXlTUUxcbm1iLnJlZ2lzdGVyU2VydmljZShuZXcgTXlzcWxEYWVtb24oKSk7XG5tYi5yZWdpc3RlclNlcnZpY2UobmV3IE15c3FsQ29ubmVjdGlvbigpKTtcbm1iLnJlZ2lzdGVyU2VydmljZShuZXcgTXlzcWxIdHRwUGx1Z2luKCkpO1xuXG4vL+ezu+e7n+aXpeW/l+iusOW9leihqFxubWIucmVnaXN0ZXJTZXJ2aWNlKG5ldyBTeXN0ZW1Mb2dnZXIoKSk7XG5cbi8v6KGo5Y+Y5YyW55uR5ZCs5ZmoXG5tYi5yZWdpc3RlclNlcnZpY2UobmV3IFF1ZXJ5VGFibGVJbmZvKCkpO1xubWIucmVnaXN0ZXJTZXJ2aWNlKG5ldyBDbGVhclRyaWdnZXIoKSk7XG5tYi5yZWdpc3RlclNlcnZpY2UobmV3IFRyaWdnZXJDcmVhdG9yKCkpO1xubWIucmVnaXN0ZXJTZXJ2aWNlKG5ldyBDaGFuZ2VkRGF0YVJlY2VpdmVyKCkpO1xubWIucmVnaXN0ZXJTZXJ2aWNlKG5ldyBEYkNoYW5nZUxpc3RlbmVyKCkpO1xuXG4vL+WQkeWklueVjOaPkOS+m3dlYnNvY2tldOacjeWKoeaOpeWPo1xubWIucmVnaXN0ZXJTZXJ2aWNlKG5ldyBXZWJTb2NrZXQoKSk7XG5tYi5yZWdpc3RlclNlcnZpY2UobmV3IFF1ZXJ5U3FsKCkpO1xubWIucmVnaXN0ZXJTZXJ2aWNlKG5ldyBCcm9hZGNhc3QoKSk7XG5tYi5yZWdpc3RlclNlcnZpY2UobmV3IExpc3RlbkRiQ2hhbmdpbmcoKSk7XG5cbm1iLnN0YXJ0KCk7Il19
