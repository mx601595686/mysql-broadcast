"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const raw = require("raw-body");
const service_starter_1 = require("service-starter");
const ChangedData_1 = require("./ChangedData");
class DbChangeListener extends service_starter_1.ServiceModule {
    onStart() {
        return new Promise((resolve, reject) => {
            this._http = http.createServer(async (req, res) => {
                if (req.method === 'POST') {
                    try {
                        const body = await raw(req, {
                            length: req.headers['content-length'],
                            limit: '3mb',
                            encoding: true
                        });
                        this.dispatch(new ChangedData_1.ChangedData(body));
                        res.statusCode = 200;
                    }
                    catch (err) {
                        this.emit('error', err);
                        res.statusCode = 500;
                    }
                }
                else {
                    res.statusCode = 403;
                    res.statusMessage = 'only post';
                }
                res.end(res.statusCode.toString());
            });
            this._http.listen(2233, (err) => {
                err ? reject(err) : resolve();
            });
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            if (this._http !== undefined) {
                this._http.close((err) => {
                    this._http = undefined;
                    err ? reject(err) : resolve();
                });
            }
            else {
                resolve();
            }
        });
    }
    onHealthChecking() {
        return new Promise((resolve, reject) => {
            http.get('http://localhost:2233', (res) => {
                if (res.statusCode === 403) {
                    resolve();
                }
                else {
                    reject(new Error('程序逻辑出现错误，期望收到的状态码是403，而实际上收到的却是：' + res.statusCode));
                }
            }).on('error', err => {
                reject(new Error('无法连接到 localhost:2233。服务器无响应。' + err));
            });
        });
    }
    dispatch(data) {
        console.log(data);
    }
}
exports.default = DbChangeListener;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE4QjtBQUM5QixnQ0FBaUM7QUFDakMscURBQXFEO0FBRXJELCtDQUE0QztBQU01QyxzQkFBc0MsU0FBUSwrQkFBYTtJQUl2RCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDMUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUM7d0JBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFOzRCQUN4QixNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzs0QkFDckMsS0FBSyxFQUFFLEtBQUs7NEJBQ1osUUFBUSxFQUFFLElBQUk7eUJBQ2pCLENBQUMsQ0FBQzt3QkFHSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUkseUJBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNyQyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztvQkFDekIsQ0FBQztvQkFBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3dCQUN4QixHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztvQkFDekIsQ0FBQztnQkFDTCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO29CQUNyQixHQUFHLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQTtnQkFDbkMsQ0FBQztnQkFFRCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQVU7Z0JBQy9CLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNO1FBQ0YsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQVU7b0JBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO29CQUN2QixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDO2dCQUNsQyxDQUFDLENBQUMsQ0FBQTtZQUNOLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixPQUFPLEVBQUUsQ0FBQztZQUNkLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLENBQUMsR0FBRztnQkFDbEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUN6QixPQUFPLEVBQUUsQ0FBQztnQkFDZCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDM0UsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRztnQkFDZCxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsOEJBQThCLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM1RCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUdELFFBQVEsQ0FBQyxJQUFpQjtRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Q0FDSjtBQW5FRCxtQ0FtRUMiLCJmaWxlIjoiRGJDaGFuZ2VMaXN0ZW5lci9EYkNoYW5nZUxpc3RlbmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5pbXBvcnQgcmF3ID0gcmVxdWlyZSgncmF3LWJvZHknKTtcbmltcG9ydCB7IFNlcnZpY2VNb2R1bGUsIGxvZyB9IGZyb20gXCJzZXJ2aWNlLXN0YXJ0ZXJcIjtcblxuaW1wb3J0IHsgQ2hhbmdlZERhdGEgfSBmcm9tICcuL0NoYW5nZWREYXRhJztcblxuLyoqXG4gKiDmlbDmja7ooajlj5jljJbnm5HlkKzlmajjgIIgICBcbiAqIOebkeWQrOWcqGxvY2FsaG9zdDoyMjMzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERiQ2hhbmdlTGlzdGVuZXIgZXh0ZW5kcyBTZXJ2aWNlTW9kdWxlIHtcblxuICAgIHByaXZhdGUgX2h0dHA6IGh0dHAuU2VydmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2h0dHAgPSBodHRwLmNyZWF0ZVNlcnZlcihhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ1BPU1QnKSB7IC8v5Y+q5YWB6K64cG9zdFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJhdyhyZXEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IHJlcS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0OiAnM21iJywgICAvL+acgOWkp+aVsOaNruWkp+WwjzPlhYZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5YiG5Y+R5aSE55CG5o6l5pS25Yiw55qE5pWw5o2uXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKG5ldyBDaGFuZ2VkRGF0YShib2R5KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gNTAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSA0MDM7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNNZXNzYWdlID0gJ29ubHkgcG9zdCdcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXMuZW5kKHJlcy5zdGF0dXNDb2RlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2h0dHAubGlzdGVuKDIyMzMsIChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25TdG9wKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2h0dHAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2h0dHAuY2xvc2UoKGVycjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faHR0cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkhlYWx0aENoZWNraW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaHR0cC5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MjIzMycsIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcign56iL5bqP6YC76L6R5Ye6546w6ZSZ6K+v77yM5pyf5pyb5pS25Yiw55qE54q25oCB56CB5pivNDAz77yM6ICM5a6e6ZmF5LiK5pS25Yiw55qE5Y205piv77yaJyArIHJlcy5zdGF0dXNDb2RlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCfml6Dms5Xov57mjqXliLAgbG9jYWxob3N0OjIyMzPjgILmnI3liqHlmajml6Dlk43lupTjgIInICsgZXJyKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy/otJ/otKPliIblj5HmjqXmlLbliLDnmoTmlbDmja5cbiAgICBkaXNwYXRjaChkYXRhOiBDaGFuZ2VkRGF0YSk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICB9XG59Il19
