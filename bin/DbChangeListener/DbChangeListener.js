"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const raw = require("raw-body");
const service_starter_1 = require("service-starter");
const ChangedData_1 = require("./ChangedData");
class DbChangeListener extends service_starter_1.ServiceModule {
    onStart() {
        return new Promise((resolve, reject) => {
            this._http = http.createServer(async (req, res) => {
                if (req.method === 'POST') {
                    try {
                        const body = await raw(req, {
                            length: req.headers['content-length'],
                            limit: '3mb',
                            encoding: true
                        });
                        this.dispatch(new ChangedData_1.ChangedData(body));
                        res.statusCode = 200;
                    }
                    catch (err) {
                        this.emit('error', err);
                        res.statusCode = 500;
                    }
                }
                else {
                    res.statusCode = 403;
                    res.statusMessage = 'only post';
                }
                res.end(res.statusCode.toString());
            });
            this._http.listen(2233, (err) => {
                err ? reject(err) : resolve();
            });
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            if (this._http !== undefined) {
                this._http.close((err) => {
                    this._http = undefined;
                    err ? reject(err) : resolve();
                });
            }
            else {
                resolve();
            }
        });
    }
    dispatch(data) {
        console.log(data);
    }
}
exports.default = DbChangeListener;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE4QjtBQUM5QixnQ0FBaUM7QUFDakMscURBQWdEO0FBRWhELCtDQUE0QztBQU01QyxzQkFBc0MsU0FBUSwrQkFBYTtJQUl2RCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDMUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUM7d0JBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFOzRCQUN4QixNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzs0QkFDckMsS0FBSyxFQUFFLEtBQUs7NEJBQ1osUUFBUSxFQUFFLElBQUk7eUJBQ2pCLENBQUMsQ0FBQzt3QkFHSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUkseUJBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNyQyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztvQkFDekIsQ0FBQztvQkFBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3dCQUN4QixHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztvQkFDekIsQ0FBQztnQkFDTCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO29CQUNyQixHQUFHLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQTtnQkFDbkMsQ0FBQztnQkFFRCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQVU7Z0JBQy9CLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNO1FBQ0YsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQVU7b0JBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO29CQUN2QixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDO2dCQUNsQyxDQUFDLENBQUMsQ0FBQTtZQUNOLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixPQUFPLEVBQUUsQ0FBQztZQUNkLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFHRCxRQUFRLENBQUMsSUFBaUI7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0NBQ0o7QUFyREQsbUNBcURDIiwiZmlsZSI6IkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuaW1wb3J0IHJhdyA9IHJlcXVpcmUoJ3Jhdy1ib2R5Jyk7XG5pbXBvcnQgeyBTZXJ2aWNlTW9kdWxlIH0gZnJvbSBcInNlcnZpY2Utc3RhcnRlclwiO1xuXG5pbXBvcnQgeyBDaGFuZ2VkRGF0YSB9IGZyb20gJy4vQ2hhbmdlZERhdGEnO1xuXG4vKipcbiAqIOaVsOaNruihqOWPmOWMluebkeWQrOWZqOOAgiAgIFxuICog55uR5ZCs5ZyobG9jYWxob3N0OjIyMzNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGJDaGFuZ2VMaXN0ZW5lciBleHRlbmRzIFNlcnZpY2VNb2R1bGUge1xuXG4gICAgcHJpdmF0ZSBfaHR0cDogaHR0cC5TZXJ2ZXIgfCB1bmRlZmluZWQ7XG5cbiAgICBvblN0YXJ0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faHR0cCA9IGh0dHAuY3JlYXRlU2VydmVyKGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXEubWV0aG9kID09PSAnUE9TVCcpIHsgLy/lj6rlhYHorrhwb3N0XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmF3KHJlcSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogcmVxLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXQ6ICczbWInLCAgIC8v5pyA5aSn5pWw5o2u5aSn5bCPM+WFhlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy/liIblj5HlpITnkIbmjqXmlLbliLDnmoTmlbDmja5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2gobmV3IENoYW5nZWREYXRhKGJvZHkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gMjAwO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSA1MDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDQwMztcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1c01lc3NhZ2UgPSAnb25seSBwb3N0J1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlcy5lbmQocmVzLnN0YXR1c0NvZGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5faHR0cC5saXN0ZW4oMjIzMywgKGVycjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblN0b3AoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5faHR0cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faHR0cC5jbG9zZSgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9odHRwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8v6LSf6LSj5YiG5Y+R5o6l5pS25Yiw55qE5pWw5o2uXG4gICAgZGlzcGF0Y2goZGF0YTogQ2hhbmdlZERhdGEpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgfVxufSJdfQ==
