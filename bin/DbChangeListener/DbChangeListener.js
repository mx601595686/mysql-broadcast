"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const raw = require("raw-body");
const service_starter_1 = require("service-starter");
const ChangedData_1 = require("./ChangedData");
class DbChangeListener extends service_starter_1.ServiceModule {
    onStart() {
        return new Promise((resolve, reject) => {
            this._http = http.createServer(async (req, res) => {
                if (req.method === 'POST') {
                    try {
                        const body = await raw(req, {
                            length: req.headers['content-length'],
                            encoding: true
                        });
                        this.dispatch(new ChangedData_1.default(body));
                        res.statusCode = 200;
                    }
                    catch (err) {
                        this.emit('error', err);
                        res.statusCode = 500;
                    }
                }
                else {
                    res.statusCode = 403;
                    res.statusMessage = 'only post';
                }
                res.end(res.statusCode.toString());
            });
            this._http.on('error', this.emit.bind(this, 'error'));
            this._http.listen(2233, (err) => {
                err ? reject(err) : resolve();
            });
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            if (this._http !== undefined) {
                this._http.close((err) => {
                    this._http = undefined;
                    err ? reject(err) : resolve();
                });
            }
            else {
                resolve();
            }
        });
    }
    onHealthChecking() {
        return new Promise((resolve, reject) => {
            http.get('http://localhost:2233', (res) => {
                if (res.statusCode === 403) {
                    resolve();
                }
                else {
                    reject(new Error('程序逻辑出现错误，期望收到的状态码是403，而实际上收到的却是：' + res.statusCode));
                }
            }).on('error', err => {
                reject(new Error('无法连接到 localhost:2233 服务器无响应。' + err));
            });
        });
    }
    dispatch(data) {
        console.log(data);
    }
}
exports.default = DbChangeListener;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE4QjtBQUM5QixnQ0FBaUM7QUFDakMscURBQXFEO0FBRXJELCtDQUF3QztBQU14QyxzQkFBc0MsU0FBUSwrQkFBYTtJQUl2RCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDMUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUM7d0JBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFOzRCQUN4QixNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzs0QkFDckMsUUFBUSxFQUFFLElBQUk7eUJBQ2pCLENBQUMsQ0FBQzt3QkFHSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUkscUJBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNyQyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztvQkFDekIsQ0FBQztvQkFBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3dCQUN4QixHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztvQkFDekIsQ0FBQztnQkFDTCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO29CQUNyQixHQUFHLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQTtnQkFDbkMsQ0FBQztnQkFFRCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFVO2dCQUMvQixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFVO29CQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztvQkFDdkIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLEVBQUUsQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osT0FBTyxFQUFFLENBQUM7WUFDZCxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLEdBQUc7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDekIsT0FBTyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsa0NBQWtDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQzNFLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUc7Z0JBQ2QsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLDhCQUE4QixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFHRCxRQUFRLENBQUMsSUFBaUI7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0NBQ0o7QUFuRUQsbUNBbUVDIiwiZmlsZSI6IkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuaW1wb3J0IHJhdyA9IHJlcXVpcmUoJ3Jhdy1ib2R5Jyk7XG5pbXBvcnQgeyBTZXJ2aWNlTW9kdWxlLCBsb2cgfSBmcm9tIFwic2VydmljZS1zdGFydGVyXCI7XG5cbmltcG9ydCBDaGFuZ2VkRGF0YSBmcm9tICcuL0NoYW5nZWREYXRhJztcblxuLyoqXG4gKiDmlbDmja7ooajlj5jljJbnm5HlkKzlmajjgIIgICBcbiAqIOebkeWQrOWcqGxvY2FsaG9zdDoyMjMzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERiQ2hhbmdlTGlzdGVuZXIgZXh0ZW5kcyBTZXJ2aWNlTW9kdWxlIHtcblxuICAgIHByaXZhdGUgX2h0dHA6IGh0dHAuU2VydmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2h0dHAgPSBodHRwLmNyZWF0ZVNlcnZlcihhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ1BPU1QnKSB7IC8v5Y+q5YWB6K64cG9zdFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJhdyhyZXEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IHJlcS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy/liIblj5HmjqXmlLbliLDnmoTmlbDmja5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2gobmV3IENoYW5nZWREYXRhKGJvZHkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gMjAwO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSA1MDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDQwMztcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1c01lc3NhZ2UgPSAnb25seSBwb3N0J1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlcy5lbmQocmVzLnN0YXR1c0NvZGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5faHR0cC5vbignZXJyb3InLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnZXJyb3InKSk7XG4gICAgICAgICAgICB0aGlzLl9odHRwLmxpc3RlbigyMjMzLCAoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uU3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9odHRwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9odHRwLmNsb3NlKChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2h0dHAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uSGVhbHRoQ2hlY2tpbmcoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBodHRwLmdldCgnaHR0cDovL2xvY2FsaG9zdDoyMjMzJywgKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCfnqIvluo/pgLvovpHlh7rnjrDplJnor6/vvIzmnJ/mnJvmlLbliLDnmoTnirbmgIHnoIHmmK80MDPvvIzogIzlrp7pmYXkuIrmlLbliLDnmoTljbTmmK/vvJonICsgcmVzLnN0YXR1c0NvZGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ+aXoOazlei/nuaOpeWIsCBsb2NhbGhvc3Q6MjIzMyDmnI3liqHlmajml6Dlk43lupTjgIInICsgZXJyKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy/otJ/otKPliIblj5HmjqXmlLbliLDnmoTmlbDmja5cbiAgICBkaXNwYXRjaChkYXRhOiBDaGFuZ2VkRGF0YSk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICB9XG59Il19
