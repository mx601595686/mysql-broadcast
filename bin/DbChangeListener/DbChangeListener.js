"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const koa = require("koa");
const bodyParser = require("koa-bodyparser");
const http = require("http");
const service_starter_1 = require("service-starter");
const RequestData_1 = require("./RequestData");
class DbChangeListener extends service_starter_1.ServiceModule {
    onStart() {
        return new Promise((resolve) => {
            this._koa = new koa();
            this._koa.use(bodyParser());
            this._koa.use(async (ctx) => {
                if (ctx.method === 'POST') {
                    this.dispatch(new RequestData_1.RequestData(ctx.request.body));
                }
                else {
                    ctx.status = 403;
                }
            });
            this._http = http.createServer(this._koa.callback());
            this._http.listen(3000);
            this._koa.on('error', this.emit.bind(this, 'error'));
            this._http.on('listening', resolve);
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            if (this._http !== undefined) {
                this._http.close((err) => {
                    this._http = undefined;
                    this._koa = undefined;
                    if (err)
                        reject(err);
                    resolve();
                });
            }
            else {
                resolve();
            }
        });
    }
    dispatch(data) {
        console.log(data);
    }
}
exports.default = DbChangeListener;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUE0QjtBQUM1Qiw2Q0FBNkM7QUFDN0MsNkJBQThCO0FBQzlCLHFEQUFnRDtBQUVoRCwrQ0FBNEM7QUFLNUMsc0JBQXNDLFNBQVEsK0JBQWE7SUFLdkQsT0FBTztRQUNILE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU87WUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFDLEdBQUc7Z0JBRW5CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLHlCQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO2dCQUNyQixDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFVO29CQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztvQkFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7b0JBQ3RCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQzt3QkFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3JCLE9BQU8sRUFBRSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFBO1lBQ04sQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUdELFFBQVEsQ0FBQyxJQUFpQjtRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Q0FDSjtBQTVDRCxtQ0E0Q0MiLCJmaWxlIjoiRGJDaGFuZ2VMaXN0ZW5lci9EYkNoYW5nZUxpc3RlbmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGtvYSA9IHJlcXVpcmUoJ2tvYScpO1xuaW1wb3J0IGJvZHlQYXJzZXIgPSByZXF1aXJlKCdrb2EtYm9keXBhcnNlcicpXG5pbXBvcnQgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmltcG9ydCB7IFNlcnZpY2VNb2R1bGUgfSBmcm9tIFwic2VydmljZS1zdGFydGVyXCI7XG5cbmltcG9ydCB7IFJlcXVlc3REYXRhIH0gZnJvbSAnLi9SZXF1ZXN0RGF0YSc7XG5cbi8qKlxuICog5pWw5o2u6KGo5Y+Y5YyW55uR5ZCs5ZmoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERiQ2hhbmdlTGlzdGVuZXIgZXh0ZW5kcyBTZXJ2aWNlTW9kdWxlIHtcblxuICAgIHByaXZhdGUgX2tvYToga29hIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX2h0dHA6IGh0dHAuU2VydmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9rb2EgPSBuZXcga29hKCk7XG4gICAgICAgICAgICB0aGlzLl9rb2EudXNlKGJvZHlQYXJzZXIoKSk7XG4gICAgICAgICAgICB0aGlzLl9rb2EudXNlKGFzeW5jIGN0eCA9PiB7XG4gICAgICAgICAgICAgICAgLy/lj6rlhYHorrhwb3N0XG4gICAgICAgICAgICAgICAgaWYgKGN0eC5tZXRob2QgPT09ICdQT1NUJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKG5ldyBSZXF1ZXN0RGF0YShjdHgucmVxdWVzdC5ib2R5KSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0YXR1cyA9IDQwMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5faHR0cCA9IGh0dHAuY3JlYXRlU2VydmVyKHRoaXMuX2tvYS5jYWxsYmFjaygpKTtcbiAgICAgICAgICAgIHRoaXMuX2h0dHAubGlzdGVuKDMwMDApO1xuICAgICAgICAgICAgdGhpcy5fa29hLm9uKCdlcnJvcicsIHRoaXMuZW1pdC5iaW5kKHRoaXMsICdlcnJvcicpKTtcbiAgICAgICAgICAgIHRoaXMuX2h0dHAub24oJ2xpc3RlbmluZycsIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblN0b3AoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5faHR0cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faHR0cC5jbG9zZSgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9odHRwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rb2EgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL+i0n+i0o+WIhuWPkeaOpeaUtuWIsOeahOaVsOaNrlxuICAgIGRpc3BhdGNoKGRhdGE6IFJlcXVlc3REYXRhKTogdm9pZCB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIH1cbn0iXX0=
