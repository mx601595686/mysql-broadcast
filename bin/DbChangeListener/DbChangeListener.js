"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RequestData_1 = require("./RequestData");
const BaseModule_1 = require("../common/BaseModule");
const koa = require("koa");
const bodyParser = require("koa-bodyparser");
const http = require("http");
class DbChangeListener extends BaseModule_1.default {
    start() {
        return new Promise((resolve) => {
            if (this._http === undefined) {
                this._koa = new koa();
                this._koa.use(bodyParser());
                this._koa.use(async (ctx) => {
                    if (ctx.method === 'POST') {
                        this.dispatch(new RequestData_1.RequestData(ctx.request.body));
                    }
                    else {
                        ctx.status = 403;
                    }
                });
                this._http = http.createServer(this._koa.callback());
                this._http.listen(3000);
                this._koa.on('error', this.emit.bind(this, 'error'));
                this._http.on('listening', resolve);
            }
            else {
                resolve();
            }
        });
    }
    destroy() {
        return new Promise((resolve, reject) => {
            if (this._http !== undefined) {
                this._http.close((err) => {
                    this._http = undefined;
                    this._koa = undefined;
                    if (err)
                        reject(err);
                    resolve();
                });
            }
            else {
                resolve();
            }
        });
    }
    dispatch(data) {
        console.log(data);
    }
}
exports.default = DbChangeListener;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUE0QztBQUM1QyxxREFBOEM7QUFDOUMsMkJBQTRCO0FBQzVCLDZDQUE2QztBQUM3Qyw2QkFBOEI7QUFFOUIsc0JBQXNDLFNBQVEsb0JBQVU7SUFLcEQsS0FBSztRQUNELE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU87WUFDN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7Z0JBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBQyxHQUFHO29CQUVuQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0JBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSx5QkFBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDckQsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDSixHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztvQkFDckIsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDeEMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE9BQU87UUFDSCxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBVTtvQkFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7b0JBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO29CQUN0QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7d0JBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNyQixPQUFPLEVBQUUsQ0FBQztnQkFDZCxDQUFDLENBQUMsQ0FBQTtZQUNOLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixPQUFPLEVBQUUsQ0FBQztZQUNkLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFHRCxRQUFRLENBQUMsSUFBaUI7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0NBQ0o7QUFoREQsbUNBZ0RDIiwiZmlsZSI6IkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3REYXRhIH0gZnJvbSAnLi9SZXF1ZXN0RGF0YSc7XG5pbXBvcnQgQmFzZU1vZHVsZSBmcm9tIFwiLi4vY29tbW9uL0Jhc2VNb2R1bGVcIjtcbmltcG9ydCBrb2EgPSByZXF1aXJlKCdrb2EnKTtcbmltcG9ydCBib2R5UGFyc2VyID0gcmVxdWlyZSgna29hLWJvZHlwYXJzZXInKVxuaW1wb3J0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERiQ2hhbmdlTGlzdGVuZXIgZXh0ZW5kcyBCYXNlTW9kdWxlIHtcblxuICAgIHByaXZhdGUgX2tvYToga29hIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX2h0dHA6IGh0dHAuU2VydmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2h0dHAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2tvYSA9IG5ldyBrb2EoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9rb2EudXNlKGJvZHlQYXJzZXIoKSlcbiAgICAgICAgICAgICAgICB0aGlzLl9rb2EudXNlKGFzeW5jIGN0eCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8v5Y+q5YWB6K64cG9zdFxuICAgICAgICAgICAgICAgICAgICBpZiAoY3R4Lm1ldGhvZCA9PT0gJ1BPU1QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKG5ldyBSZXF1ZXN0RGF0YShjdHgucmVxdWVzdC5ib2R5KSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguc3RhdHVzID0gNDAzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9odHRwID0gaHR0cC5jcmVhdGVTZXJ2ZXIodGhpcy5fa29hLmNhbGxiYWNrKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2h0dHAubGlzdGVuKDMwMDApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2tvYS5vbignZXJyb3InLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnZXJyb3InKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5faHR0cC5vbignbGlzdGVuaW5nJywgcmVzb2x2ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9odHRwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9odHRwLmNsb3NlKChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2h0dHAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tvYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8v6LSf6LSj5YiG5Y+R5o6l5pS25Yiw55qE5pWw5o2uXG4gICAgZGlzcGF0Y2goZGF0YTogUmVxdWVzdERhdGEpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgfVxufSJdfQ==
