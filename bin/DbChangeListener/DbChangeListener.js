"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const koa = require("koa");
const http = require("http");
const service_starter_1 = require("service-starter");
const ChangedData_1 = require("./ChangedData");
class DbChangeListener extends service_starter_1.ServiceModule {
    onStart() {
        return new Promise((resolve) => {
            this._koa = new koa();
            this._koa.use(async (ctx) => {
                if (ctx.method === 'POST') {
                    try {
                        debugger;
                        this.dispatch(new ChangedData_1.ChangedData(ctx.request.body));
                    }
                    catch (err) {
                        this.emit(err);
                    }
                    ctx.status = 200;
                }
                else {
                    ctx.status = 403;
                }
            });
            this._http = http.createServer(this._koa.callback());
            this._http.listen(2233, resolve);
            this._koa.on('error', this.emit.bind(this, 'error'));
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            if (this._http !== undefined) {
                this._http.close((err) => {
                    this._http = undefined;
                    this._koa = undefined;
                    if (err)
                        reject(err);
                    resolve();
                });
            }
            else {
                resolve();
            }
        });
    }
    dispatch(data) {
        console.log(data);
    }
}
exports.default = DbChangeListener;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRiQ2hhbmdlTGlzdGVuZXIvRGJDaGFuZ2VMaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUE0QjtBQUU1Qiw2QkFBOEI7QUFDOUIscURBQWdEO0FBRWhELCtDQUE0QztBQUs1QyxzQkFBc0MsU0FBUSwrQkFBYTtJQUt2RCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTztZQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7WUFFdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFDLEdBQUc7Z0JBRW5CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDeEIsSUFBSSxDQUFDO3dCQUNELFFBQVEsQ0FBQTt3QkFDUixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUkseUJBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3JELENBQUM7b0JBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzt3QkFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNuQixDQUFDO29CQUNELEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO2dCQUNyQixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO2dCQUNyQixDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFVO29CQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztvQkFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7b0JBQ3RCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQzt3QkFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3JCLE9BQU8sRUFBRSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFBO1lBQ04sQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUdELFFBQVEsQ0FBQyxJQUFpQjtRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Q0FDSjtBQWpERCxtQ0FpREMiLCJmaWxlIjoiRGJDaGFuZ2VMaXN0ZW5lci9EYkNoYW5nZUxpc3RlbmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGtvYSA9IHJlcXVpcmUoJ2tvYScpO1xuaW1wb3J0IGJvZHlQYXJzZXIgPSByZXF1aXJlKCdrb2EtYm9keXBhcnNlcicpXG5pbXBvcnQgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmltcG9ydCB7IFNlcnZpY2VNb2R1bGUgfSBmcm9tIFwic2VydmljZS1zdGFydGVyXCI7XG5cbmltcG9ydCB7IENoYW5nZWREYXRhIH0gZnJvbSAnLi9DaGFuZ2VkRGF0YSc7XG5cbi8qKlxuICog5pWw5o2u6KGo5Y+Y5YyW55uR5ZCs5ZmoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERiQ2hhbmdlTGlzdGVuZXIgZXh0ZW5kcyBTZXJ2aWNlTW9kdWxlIHtcblxuICAgIHByaXZhdGUgX2tvYToga29hIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX2h0dHA6IGh0dHAuU2VydmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9rb2EgPSBuZXcga29hKCk7XG4gICAgICAgICAgICAvL3RoaXMuX2tvYS51c2UoYm9keVBhcnNlcigpKTtcbiAgICAgICAgICAgIHRoaXMuX2tvYS51c2UoYXN5bmMgY3R4ID0+IHtcbiAgICAgICAgICAgICAgICAvL+WPquWFgeiuuHBvc3RcbiAgICAgICAgICAgICAgICBpZiAoY3R4Lm1ldGhvZCA9PT0gJ1BPU1QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaChuZXcgQ2hhbmdlZERhdGEoY3R4LnJlcXVlc3QuYm9keSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdGF0dXMgPSAyMDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0YXR1cyA9IDQwMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5faHR0cCA9IGh0dHAuY3JlYXRlU2VydmVyKHRoaXMuX2tvYS5jYWxsYmFjaygpKTtcbiAgICAgICAgICAgIHRoaXMuX2h0dHAubGlzdGVuKDIyMzMsIHJlc29sdmUpO1xuICAgICAgICAgICAgdGhpcy5fa29hLm9uKCdlcnJvcicsIHRoaXMuZW1pdC5iaW5kKHRoaXMsICdlcnJvcicpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25TdG9wKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2h0dHAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2h0dHAuY2xvc2UoKGVycjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faHR0cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa29hID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy/otJ/otKPliIblj5HmjqXmlLbliLDnmoTmlbDmja5cbiAgICBkaXNwYXRjaChkYXRhOiBDaGFuZ2VkRGF0YSk6IHZvaWQge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICB9XG59Il19
